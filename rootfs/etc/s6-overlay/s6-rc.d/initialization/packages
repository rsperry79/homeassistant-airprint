#!/command/with-contend bashio

readonly packages_path=/config/packages
readonly install_script=custom-install.sh
readonly src_custom_script_template_path=/usr/templates/scripts

function run() {
  ensure_package_paths
  install_config_packages
  upgrade
  run_custom_script
}

# Packages folder
function ensure_package_paths() {
  if ! bashio::fs.directory_exists "${packages_path}"; then
    mkdir -p "${packages_path}" ||
      bashio::exit.nok 'Failed to create a persistent cups config folder'

    chmod 700 "${packages_path}" ||
      bashio::exit.nok \
        'Failed setting permissions on persistent cups config folder'
  fi

  if [ ! -e "$packages_path/$install_script" ]; then
    cp "$src_custom_script_template_path/$install_script" "$packages_path/$install_script"
  fi
}

# Install user configured/requested packages
function install_config_packages() {
  if bashio::config.has_value 'packages'; then
    apt update ||
      bashio::exit.nok 'Failed updating packages repository indexes'

    for package in $(bashio::config 'packages'); do
      apt-get install "$package" -y --no-install-recommends ||
        bashio::exit.nok "Failed installing package ${package}"
    done
  fi
}

function upgrade() {
  # TODO add if autoupdate
  bashio::log.info "Running apt upgrade"
  apt update ||
    bashio::exit.nok 'Failed updating packages repository indexes'
  apt upgrade -y --no-install-recommends ||
    bashio::exit.nok "Failed to upgrade apt packages"
}

function run_custom_script() {
  bashio "$packages_path/$install_script"
}

run
