#!/command/with-contend bashio
readonly cups_templates_path=/config/templates/cups

# HA File paths
readonly real_cups_path=/config/cups

# CUPS paths
readonly cups_client_cfg=client.conf
readonly cups_daemon_cfg=cupsd.conf
readonly cups_files_cfg=cups-files.conf
readonly ssl_dir="/config/cups/ssl/"
readonly ssl_owner="root"
readonly ssl_group="root"

function run() {
    setup

    if [ ! -e "$real_cups_path/$cups_client_cfg" ]; then
        autoconf_client
    else
        update_client
    fi

    if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then
        autoconf_daemon
    else
        update_daemon
    fi

    if [ ! -e "$real_cups_path/$cups_files_cfg" ]; then
        autoconf_files
    else
        update_files
    fi

}

# Gets current settings from HA
function setup() {
    hostname=$(bashio::info.hostname)
    internal=$hostname
    external=$hostname
    cups_log_level="error"
    cups_access_log_level="config"
    host_alias="*"

    if bashio::config.has_value 'cups_log_level'; then
        cups_log_level=$(bashio::config 'cups_log_level')
    fi

    if bashio::config.has_value 'cups_access_log_level'; then
        cups_access_log_level=$(bashio::config 'cups_access_log_level')
    fi

    setup_ssl

    # Used by autoconf
    config=$(jq --arg internal "$internal" \
        --arg external "$external" --arg hostname "$hostname" \
        --arg privkey "$privkey" --arg pubkey "$pubkey" --arg cups_log_level "$cups_log_level" \
        --arg cups_access_log_level "$cups_access_log_level" --arg host_alias "$host_alias" --arg self_sign "$self_sign" \
        '{internal: $internal, external: $external, hostname: $hostname, privkey: $privkey, pubkey: $pubkey, cups_log_level: $cups_log_level, cups_access_log_level: $cups_access_log_level, host_alias: $host_alias , self_sign: $self_sign   }' \
        /data/options.json)
}

function setup_ssl() {
    # TODO MOVE
    if [ ! -d "$ssl_dir" ]; then
        mkdir -p "$ssl_dir"
    fi

    sign=$(bashio::config cups_self_sign)
    bashio::log.info self sign has value: "$sign"

    if bashio::config.has_value cups_self_sign && bashio::config.true 'cups_self_sign'; then
        bashio::log.info "Self sign is on"
        self_sign=yes
        privkey="$ssl_dir/$hostname.crt"
        pubkey="$ssl_dir/$hostname.pem"

    else
        bashio::log.info "Self sign is off"
        self_sign=no
        setup_ssl_public
        setup_ssl_private
    fi

}

function setup_ssl_private() {
    privkey="/ssl/privkey.pem"
    if bashio::config.has_value 'cups_ssl_key'; then
        privkey=$(bashio::config 'cups_ssl_key')
    elif [ -e "/ssl/privkey.pem" ]; then
        privkey="/ssl/privkey.pem"
    else
        privkey=""
    fi

    if [ ! -e "$privkey" ]; then
        bashio::log.notice "SSL Private key does not exist at given path"
    else
        rm -f "$ssl_dir/$hostname.key"
        msg=$(openssl rsa -outform der -in "$privkey" -out "$ssl_dir/$hostname.key")
        if [ $? -eq 0 ]; then
            chown "$ssl_owner":"$ssl_group" "$ssl_dir/$hostname.key"
            chmod 770 "$ssl_dir/$hostname.key"
            privkey="$ssl_dir/$hostname.key"
            bashio::log.debug "SSL Private Key exists. $privkey"
        else
            bashio::log.error "Private key is not valid. $msg"
        fi
    fi
}

function setup_ssl_public() {
    if bashio::config.has_value 'cups_ssl_cert'; then
        pubkey=$(bashio::config 'cups_ssl_cert')
    elif [ -e "/ssl/fullchain.pem" ]; then
        pubkey="/ssl/fullchain.pem"
    else
        pubkey=""
    fi
    if [ ! -e "$pubkey" ]; then
        bashio::log.notice "SSL Public key does not exist at given path"
    else
        host_alias=$(openssl x509 -noout -subject -in "$pubkey" -nameopt multiline | awk -F' = ' '/commonName/ {print $2}')
        rm -f "$ssl_dir/$hostname.crt"
        msg=$(openssl x509 -outform der -in "$pubkey" -out "$ssl_dir/$hostname.crt")
        if [ $? -eq 0 ]; then
            chown "$ssl_owner":"$ssl_group" "$ssl_dir/$hostname.crt"
            chmod 770 "$ssl_dir/$hostname.crt"
            pubkey="$ssl_dir/$hostname.crt"
            bashio::log.debug "SSL Public Key exists. $pubkey"
        else
            bashio::log.error "Public key is not valid. $msg"
        fi
    fi
}

function autoconf_client() {
    echo "$config" | tempio \
        -template "$cups_templates_path/$cups_client_cfg.tempio" \
        -out "$real_cups_path/$cups_client_cfg"
}

function update_client() {
    echo "No changes needed"
}

function autoconf_daemon() {
    # if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then
    echo "$config" | tempio \
        -template "$cups_templates_path/$cups_daemon_cfg.tempio" \
        -out "$real_cups_path/$cups_daemon_cfg"
    # fi
}

function update_daemon() {
    sed -i "s/^.*LogLevel .*/LogLevel ${cups_log_level}/" "$real_cups_path/$cups_daemon_cfg"
    sed -i "s/^.*ServerName .*/ServerName ${hostname}/" "$real_cups_path/$cups_daemon_cfg"
    sed -i "s/^.*ServerAlias .*/ServerAlias ${host_alias}/" "$real_cups_path/$cups_daemon_cfg"
}

function autoconf_files() {

    echo "$config" | tempio \
        -template "$cups_templates_path/$cups_files_cfg.tempio" \
        -out "$real_cups_path/$cups_files_cfg"
}

function update_files() {
    sed -i "s/^.*AccessLogLevel .*/AccessLogLevel ${cups_access_log_level}/" "$real_cups_path/$cups_files_cfg"
    sed -i "s#^.*ServerCertificate .*#ServerCertificate ${pubkey}#" "$real_cups_path/$cups_files_cfg"
    sed -i "s#^.*ServerKey .*#ServerKey ${cups_access_log_level}#" "$real_cups_path/$cups_files_cfg"
    sed -i "s#^.*CreateSelfSignedCerts .*#CreateSelfSignedCerts ${self_sign}#" "$real_cups_path/$cups_files_cfg"
}

run
