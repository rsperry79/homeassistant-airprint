#!/command/with-contend bashio

# Avahi paths
readonly avahi_daemon_cfg=avahi-daemon.conf
readonly real_avahi_path=/config/avahi
readonly avahi_templates_path=/config/templates/avahi

function run() {
  setup
  #get_interfaces
  bcast_interfaces=""
  if [ ! -e "$real_avahi_path/$avahi_daemon_cfg" ]; then
    autoconf_config
  else
    update_config
  fi

}

function setup() {
  hostname=$(bashio::info.hostname)
  host="${hostname%%.*}"
  interfaces="enp2s0"

  use_ipv6="no"
  if bashio::config.has_value 'use_ipv6'; then
    ipv6_flag=$(bashio::config 'use_ipv6')
    if [ "$ipv6_flag" == true ]; then
      use_ipv6="yes"
    fi
  fi

  avahi_reflector="no"
  if bashio::config.has_value 'avahi_reflector'; then
    avahi_reflector_flag=$(bashio::config 'avahi_reflector')
    if [ "$avahi_reflector_flag" == true ]; then
      avahi_reflector="yes"
    fi
  fi

  avahi_reflect_ipv="no"
  if bashio::config.has_value 'avahi_reflector'; then
    avahi_reflector_flag=$(bashio::config 'avahi_reflector')
    if [ "$avahi_reflector_flag" == true ]; then
      avahi_reflect_ipv="yes"
    fi
  fi
}

# Uses the template to regenerate the configuration file. Ensures a clean file.
function autoconf_config() {
  # Fill config file templates with runtime data

  config=$(jq --arg hostname "$host" --arg use_ipv6 "$use_ipv6" --arg avahi_reflector "$avahi_reflector" --arg avahi_reflect_ipv "$avahi_reflect_ipv" --arg bcast_interfaces "$bcast_interfaces" \
    '{hostname: $hostname, use_ipv6: $use_ipv6, avahi_reflector: $avahi_reflector, avahi_reflect_ipv: $avahi_reflect_ipv,  bcast_interfaces: $bcast_interfaces}' \
    /data/options.json)
  #if [ ! -e "$real_cups_path/$cups_daemon_cfg" ]; then

  echo "$config" | tempio \
    -template "$avahi_templates_path/$avahi_daemon_cfg".tempio \
    -out "$real_avahi_path/$avahi_daemon_cfg"
}

function update_config() {
  sed -i "s/^.*host-name=.*/host-name=${host}/" "$real_avahi_path/$avahi_daemon_cfg"
  sed -i "s/^.*use-ipv6=.*/use-ipv6=${use_ipv6}/" "$real_avahi_path/$avahi_daemon_cfg"
  sed -i "s/^.*publish-aaaa-on-ipv4=.*/publish-aaaa-on-ipv4=${use_ipv6}/" "$real_avahi_path/$avahi_daemon_cfg"
  sed -i "s/^.*enable\-reflector=.*/enable\-reflector\=${avahi_reflector}/" "$real_avahi_path/$avahi_daemon_cfg"
  sed -i "s/^.*reflect\-ipv=.*/reflect\-ipv\=${avahi_reflect_ipv}/" "$real_avahi_path/$avahi_daemon_cfg"
  sed -i "s/^.*allow-interfaces=.*/allow-interfaces=${bcast_interfaces}/" "$real_avahi_path/$avahi_daemon_cfg"
}

function get_interfaces() {
  # gets all network interfaces with their broadcast addresses
  bcast_interfaces=""
  interfaces=()
  if ! bashio::config.has_value 'interfaces'; then

    bashio::log.info "Config has no network interfaces listed.  Attempting to get them."
    # Ensure 'ip' command exists
    if ! command -v ip &>/dev/null; then
      bashio::exit.nok "Error: 'ip' command not found. Please install iproute2."
    fi

    # Get interfaces with broadcast addresses
    while IFS= read -r line; do
      iface=$(awk '{print $2}' <<<"$line" | cut -d':' -f1)
      bcast=$(awk '{for(i=1;i<=NF;i++){if($i=="brd"){print $(i+1)}}}' <<<"$line")

      # Only print if broadcast address exists
      if [[ -n "$bcast" ]]; then
        interfaces+=("$iface")

      fi
    done < <(ip -o addr show | grep ' brd ')

    bashio::log.info "Updating interfaces in config"
    bashio::addon.option 'interfaces' "${interfaces[@]}"
  else
    # shellcheck disable=SC2178
    interfaces=$(bashio::config 'interfaces')
  fi

  for interface in "${interfaces[@]}"; do
    if [ -n "$bcast_interfaces" ]; then
      bcast_interfaces+=",$interface"
    else
      bcast_interfaces=$interface
    fi
  done

}

run
